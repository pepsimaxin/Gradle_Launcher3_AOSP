allprojects {
    repositories {
//        maven { url "../../../prebuilts/sdk/current/androidx/m2repository" }
//        maven { url "../../../prebuilts/fullsdk-darwin/extras/android/m2repository" }
//        maven { url "../../../prebuilts/fullsdk-linux/extras/android/m2repository" }
//        mavenCentral()
//        google()

        jcenter()
        google()
        mavenCentral()
        flatDir {
            dirs 'libs'
        }
        maven { url 'https://repo1.maven.org/maven2/' }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            Set<File> fileSet = options.bootstrapClasspath.getFiles()
            List<File> newFileList = new ArrayList<>();
            //相对位置，根据存放的位置修改路径
            newFileList.add(new File("./dlibs/framework.jar"))
            newFileList.add(new File("./dlibs/core-oj.jar"))

            newFileList.addAll(fileSet)
            options.bootstrapClasspath = files(
                    newFileList.toArray()
            )
        }
    }
}

buildscript {
    repositories {
        maven { url 'https://repo1.maven.org/maven2/' }
        mavenCentral()
        google()
        jcenter()
        flatDir {
            dirs 'libs'
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.0'
        classpath PROTOBUF_CLASS_PATH
        classpath KOTLIN_CLASS_PATH
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'
apply plugin: 'kotlin-android'


android {
    compileSdkVersion 33
    buildToolsVersion BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion 25
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        ndk {
            abiFilters 'arm64-v8a'
        }
    }

//    sourceSets {
//        main {
//            java.srcDirs = ['src', 'src_full_lib']
//            manifest.srcFile 'AndroidManifest.xml'
//            res.srcDirs = ['res']
//        }
//    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled false
        }

        debug {
            debuggable false
            minifyEnabled false
        }

        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "Launcher3.apk"
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    // The flavor dimensions for build variants (e.g. aospWithQuickstep, aospWithoutQuickstep)
    // See: https://developer.android.com/studio/build/build-variants#flavor-dimensions
    flavorDimensions "app", "recents"

    productFlavors {
        aosp {
            dimension "app"
            applicationId 'com.android.launcher3'
            testApplicationId 'com.android.launcher3.tests'
        }

//        l3go {
//            dimension "app"
//            applicationId 'com.android.launcher3'
//            testApplicationId 'com.android.launcher3.tests'
//        }

        withQuickstep {
            dimension "recents"
            minSdkVersion 28
        }

//        withoutQuickstep {
//            dimension "recents"
//        }
    }

    // Disable release builds for now
//    android.variantFilter { variant ->
//        if (variant.buildType.name.endsWith('release')) {
//            variant.setIgnore(true)
//        }
//    }

    sourceSets {
        main {
            res.srcDirs = ['res', 'iconloaderlib/res']
            java.srcDirs = ['src', 'src_plugins', 'iconloaderlib/src', 'iconloaderlib/src_full_lib']
            manifest.srcFile 'AndroidManifest-common.xml'
            proto {
                srcDir 'protos/'
                srcDir 'proto_overrides/'
            }
            assets.srcDirs = ['assets', 'assets/']
            aidl.srcDirs = ['aidl']
        }

//        androidTest {
//            res.srcDirs = ['tests/res']
//            java.srcDirs = ['tests/src', 'tests/tapl']
//            manifest.srcFile "tests/AndroidManifest-common.xml"
//        }
//
//        androidTestDebug {
//            manifest.srcFile "tests/AndroidManifest.xml"
//        }

        aosp {
            java.srcDirs = ['src_flags', 'src_shortcuts_overrides']
            manifest.srcFile "AndroidManifest.xml"    // added by marco
        }

//        aospWithoutQuickstep {
//            manifest.srcFile "AndroidManifest.xml"
//        }

//        aospWithQuickstep {
//            manifest.srcFile "quickstep/AndroidManifest-launcher.xml"
//        }

//        l3go {
//            res.srcDirs = ['go/res']
//            java.srcDirs = ['go/src']
//            manifest.srcFile "go/AndroidManifest.xml"
//        }
//
//        l3goWithoutQuickstepDebug {
//            manifest.srcFile "AndroidManifest.xml"
//        }
//
//        l3goWithQuickstepDebug {
//            manifest.srcFile "quickstep/AndroidManifest-launcher.xml"
//        }
//
//        withoutQuickstep {
//            java.srcDirs = ['src_ui_overrides']
//        }

        withQuickstep {
            res.srcDirs = ['quickstep/res', 'quickstep/recents_ui_overrides/res']
            java.srcDirs = ['quickstep/src', 'quickstep/recents_ui_overrides/src']
            manifest.srcFile "quickstep/AndroidManifest.xml"
        }
    }
}

dependencies {
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation fileTree(dir: "libs", include: ['*.jar'])
    compileOnly fileTree(include: '*.jar', dir: 'dlibs')
    implementation "androidx.dynamicanimation:dynamicanimation:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation "androidx.preference:preference-ktx:1.2.0"

    // 批量导入aar
    implementation fileTree(include: ['*.aar'], dir: 'libs')

    implementation fileTree(dir: "libs", include: '*.jar')
    implementation fileTree(dir: "quickstep/libs", include: '*.jar')
    implementation project(':SystemUI_plugin')
    implementation project(':SystemUI_shared')
    implementation project(':SystemUI_plugin_core')

    // Recents lib dependency
    withQuickstepImplementation fileTree(dir: "quickstep/libs", include: '*.jar')
    implementation 'com.github.bumptech.glide:glide:4.13.0'

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$KTX_VERSION"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$KTX_VERSION"//lifecycleScope
    implementation "androidx.lifecycle:lifecycle-process:$KTX_VERSION"
    implementation "androidx.core:core-ktx:$CODE_KTX_VERSION"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$COROUTINES_VERSION"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$COROUTINES_VERSION"
}

protobuf {
    // Configure the protoc executable
    protoc {
        // 通用 artifact
        artifact = 'com.google.protobuf:protoc:3.0.0'
        // MacOS
        if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            artifact = 'com.google.protobuf:protoc:3.0.0:osx-x86_64'
        }

        generateProtoTasks {
            all().each { task ->
                task.builtins {
                    remove java
                    javanano {
                        option "java_package=launcher_log_extension.proto|com.android.launcher3.userevent.nano"
                        option "java_package=launcher_log.proto|com.android.launcher3.userevent.nano"
                        option "java_package=launcher_dump.proto|com.android.launcher3.model.nano"
                        option "enum_style=java"
                    }
                }
            }
        }
    }
}
